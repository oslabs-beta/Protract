/*

input:
comps = [
  {
    value: app,
    canEnter: true,
    children: [
      {value: comp1, etc.},
      {value: comp2, etc.},
      {value: comp3, etc.}
    ]
  }
]
output: zipped folder (blob)

// X create a src folder
// go into src folder
// create app folder 
// go into app folder
// create app.componen.html, .css, .spec.ts, .ts, .module.ts ONCE
// create components folder
// go into components folder
// iterate through input comps (or app object),
  // create app.componen.html, .css, .spec.ts, .ts per node that has property 'canEnter'
    // go into .ts file, write boilerplate with corresponding 'code' property contents into the file



src{
  app{
    app.module.ts --> logic to import custom component name, then add custom component name to declarations property in @NgModule
    app.component.html
    app.component.css
    app.component.spec.ts
    app.component.ts
    components{
      comp1{
        comp1.html
        comp1.css
        comp1.component.spec.ts
        comp1.component.ts
      }
      comp2{
        comp2.html
        comp2.css
        comp2.component.spec.ts
        comp2.component.ts
      }
    }
  } 
}    


*/